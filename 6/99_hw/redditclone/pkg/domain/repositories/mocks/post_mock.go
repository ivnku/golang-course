// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "redditclone/pkg/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockIPostsRepository is a mock of IPostsRepository interface.
type MockIPostsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPostsRepositoryMockRecorder
}

// MockIPostsRepositoryMockRecorder is the mock recorder for MockIPostsRepository.
type MockIPostsRepositoryMockRecorder struct {
	mock *MockIPostsRepository
}

// NewMockIPostsRepository creates a new mock instance.
func NewMockIPostsRepository(ctrl *gomock.Controller) *MockIPostsRepository {
	mock := &MockIPostsRepository{ctrl: ctrl}
	mock.recorder = &MockIPostsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostsRepository) EXPECT() *MockIPostsRepositoryMockRecorder {
	return m.recorder
}

// CategoryList mocks base method.
func (m *MockIPostsRepository) CategoryList(categoryName string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryList", categoryName)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryList indicates an expected call of CategoryList.
func (mr *MockIPostsRepositoryMockRecorder) CategoryList(categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryList", reflect.TypeOf((*MockIPostsRepository)(nil).CategoryList), categoryName)
}

// Create mocks base method.
func (m *MockIPostsRepository) Create(post *models.Post) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPostsRepositoryMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPostsRepository)(nil).Create), post)
}

// Delete mocks base method.
func (m *MockIPostsRepository) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIPostsRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPostsRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockIPostsRepository) Get(id string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPostsRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPostsRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockIPostsRepository) List() ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPostsRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPostsRepository)(nil).List))
}

// Update mocks base method.
func (m *MockIPostsRepository) Update(post *models.Post, fields []primitive.E) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", post, fields)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIPostsRepositoryMockRecorder) Update(post, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPostsRepository)(nil).Update), post, fields)
}

// UserList mocks base method.
func (m *MockIPostsRepository) UserList(userId uint) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", userId)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockIPostsRepositoryMockRecorder) UserList(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockIPostsRepository)(nil).UserList), userId)
}
