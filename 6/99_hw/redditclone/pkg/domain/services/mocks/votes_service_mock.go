// Code generated by MockGen. DO NOT EDIT.
// Source: vote.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "redditclone/pkg/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVotesService is a mock of IVotesService interface.
type MockIVotesService struct {
	ctrl     *gomock.Controller
	recorder *MockIVotesServiceMockRecorder
}

// MockIVotesServiceMockRecorder is the mock recorder for MockIVotesService.
type MockIVotesServiceMockRecorder struct {
	mock *MockIVotesService
}

// NewMockIVotesService creates a new mock instance.
func NewMockIVotesService(ctrl *gomock.Controller) *MockIVotesService {
	mock := &MockIVotesService{ctrl: ctrl}
	mock.recorder = &MockIVotesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVotesService) EXPECT() *MockIVotesServiceMockRecorder {
	return m.recorder
}

// ApplyVote mocks base method.
func (m *MockIVotesService) ApplyVote(postId string, userId uint, voteValue int) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyVote", postId, userId, voteValue)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyVote indicates an expected call of ApplyVote.
func (mr *MockIVotesServiceMockRecorder) ApplyVote(postId, userId, voteValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyVote", reflect.TypeOf((*MockIVotesService)(nil).ApplyVote), postId, userId, voteValue)
}

// CalculateScore mocks base method.
func (m *MockIVotesService) CalculateScore(votes []*models.Vote) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateScore", votes)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateScore indicates an expected call of CalculateScore.
func (mr *MockIVotesServiceMockRecorder) CalculateScore(votes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateScore", reflect.TypeOf((*MockIVotesService)(nil).CalculateScore), votes)
}

// CalculateUpvotePercentage mocks base method.
func (m *MockIVotesService) CalculateUpvotePercentage(votes []*models.Vote) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateUpvotePercentage", votes)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateUpvotePercentage indicates an expected call of CalculateUpvotePercentage.
func (mr *MockIVotesServiceMockRecorder) CalculateUpvotePercentage(votes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateUpvotePercentage", reflect.TypeOf((*MockIVotesService)(nil).CalculateUpvotePercentage), votes)
}

// Unvote mocks base method.
func (m *MockIVotesService) Unvote(userId uint, postId string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unvote", userId, postId)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unvote indicates an expected call of Unvote.
func (mr *MockIVotesServiceMockRecorder) Unvote(userId, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unvote", reflect.TypeOf((*MockIVotesService)(nil).Unvote), userId, postId)
}
